{
	// Place your new-rumah123 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and ,
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope ,
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is ,
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: ,
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. ,
	// Placeholders with the same ids are connected.,
	// Example:
	"comp-atomic": {
		"scope": "typescript",
		"prefix": "node-api-rest",
		"body": [
      "import { ServerAPIHandler } from '@helpers/types/server-props'",
      "import { sendAPIPost } from '@libs/serverAxiosService'",
      "import { withSessionRoute } from '@libs/withSession'",
      "import { AxiosResponse } from 'axios'",
      "import HttpStatus from 'http-status-codes'",
      "import { NextApiRequest, NextApiResponse } from 'next'",
      "",
      "const handler",
      "  : ServerAPIHandler",
      "  = async (",
      "    req: NextApiRequest,",
      "    res: NextApiResponse,",
      "  ) => {",
      "    const url",
      "      : string",
      "      = ''",
      "",
      "    const bodyRaw",
      "      : object",
      "      = {}",
      "",
      "    const authToken",
      "      : string",
      "      = req",
      "        ?.session",
      "        ?.user",
      "        ?.userInfo",
      "        ?.Auth",
      "        ?.accessToken || null",
      "",
      "    // /** WHEN LOGIN IS NECESSARY **/",
      "    // if(authToken) {",
      "    // \treturn res",
      "    // \t\t.status(HttpStatus.UNAUTHORIZED)",
      "    // \t\t.json({",
      "    // \t\t\tmessage: 'Authentication Token not found',",
      "    // \t\t})",
      "    // }",
      "",
      "    sendAPIPost(",
      "      url,",
      "      bodyRaw,",
      "      authToken,",
      "    )",
      "      .then((value: AxiosResponse<any>) => {",
      "",
      "        return res.status(200)",
      "          .json({",
      "            message: 'Success',",
      "            data: {",
      "              // data",
      "            },",
      "          })",
      "      })",
      "      .catch((reason:any) => {",
      "",
      "        return res",
      "          .status(reason.response?.code || HttpStatus.INTERNAL_SERVER_ERROR)",
      "          .json({",
      "            message: 'Err',",
      "            data: reason.response?.data,",
      "          })",
      "      })",
      "  }",
      "",
      "export default withSessionRoute(handler)",
    ],
    "description": "React Redux Component Template",
  }
}